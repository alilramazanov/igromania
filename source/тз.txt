

		
		Сделать web api для взаимодействия с базой данных, в которой хранятся данные о видеоиграх,
		реализовать CRUD операции с ней, а также метод для получения списка игр определённого жанра.
		Информация о игре: название, студия разработчик, несколько жанров, которым соответствует игра.
		Используя любой фреймворк или без фреймворка.
		Действуя согласно SOLID MVC MVVM.
		Сделать минимум 3 слоя абстракций, а контроллеры "тонкими".
		
		
		Реализация 
		
		1. Написать регистрацию, аутентификацию 
		2. Добавить фильтры по названию, жанрам, и студиям
		3. Добавить сущноности "Игра" поля: превью, детальные фото, несколько видео. 
		4. Так же реализовать функционал рецензий с оценками игры и категорией настроений. 
		5. Реализовать функционал статей по играм  с коментариями, лайками статей и коментариев, и коментарии для коментарий (вложенные комантарии). 
		   Так же статьи имеют категории настроения (положительная, отрицательная, и серая). Статьи с большим кол-вом лайков поднимаются в топ. 
		6. Реализовать статистику в детальной игры по оценкам и отзывам, по статьям. 
		7. Получения списка игр сделать с фильтрами и сортировками. Так же сделать список получения параметров фильтров и их доступных значений (категория: кол-во игр в этой категории). 
		8. детальная игры будет содержать: общий 10 бальный рейтинг; количество рецензий, процент положительных, средних, и негативных рецензий; у рецензии есть фото и имя автора с кол вом всех его рецензий;
		   список первых 5 рецензий и возможность получения списка рецензий по id игры; самая популярная статья и возможность посмотреть список.
		9. в детальной статей будет дата создания, наименование, содержимое, ссылка на игру, кол во лайков и дизлайков, а так же список коментов и подкоментов. Оставить те же статистики что в играх
		10. добавление игры в избранное и получение списка игр с пометкой избранного
		11. авторизация. Роль админа и обычного пользователя. Регистрация по смс 
		12. логгирование 
		
		
		Сущности
		1. игры, рецензии, статьи, жанры, коментарии, лайки, студии. 
		2. статистики и рейтинги по : играм (на основе всех оценок (по 10 бальной шкале); на основе рецензий (процент положительных, отрицательных, и нейтральных)
					     
		
		
		
		
		Технологии. 
		1. сделать полную документацию апи в свагере 
		2. docker для развертки 
		3. индексы для оптимизации запросов 
		4. фабрики и сидеры длы заполнения данными 
		5. unit tests
		6. дизайн в фигме 
		7. обработка ошибок 
		8. события и обсерверв 
		2. использовать редис для сохранения в базе таких значений как:
		
		
		
		
		
		Этапы разработки 
		
		1. Написать регистрацию, аутентификацию, авторизацию	
		2. Добавить сущность игры, жанры, студии. Написать сидеры и фабрики. Написать фильтры для игры. 
		   - добавить метод для получения списка параметров фильтрации и минимальных максимальных значений
		   - вынести логику изменения данных в отдельный сервисный слой
		   - вынесли логику работы с файлами (фото и видео) в отдельный сервис
		   Реализовать добавление и получения фото и видео
		   
		3. реализовать рецензии для игры которые могут оставлять обычные юзеры.
		   Рецензией является текст с оценкой игры, и настроением рецензии, так же можно поставить оценку без текста,
		   но в списке рецензий нужно чтобы появлялись рецензии только с текстом. 
		   - Написать отдельный сервис статистики. Статистика будет собираться из всех оценок. 
		   - иметь dto модель статистики по рецензиям с полями: (кол-во положительных, отрицательных, нейтральных отзывов; общее кол-во отзывов, среднее значение оценок )
		   - Ретинг будет создаваться на основе статистики, и dto рейтинга имеет следующие поля: рейтинг на основе кол-ва рецензий (на основе настроения(50,30,20)), общий рейтинг на основе рецензий (6.1)
		   - сортировка игр возможна по среднему значению окенки(возрастание,убыванию)
		   1. Так же рецензии могут оставлять модераторы, и для них будет отдельный список всего перечисленного. Но архитектура должна быть такой,
		   чтобы код получения статистики оставался гибким и его легко можно было расширить рецензиями других ролей. 
		   2. Так же подумать как гибко перемещать обЪект статистики и какие у него могут быть зависимости (внедрить через loc контейнер)
		   
		4. Реализовать роль "модератор", который может создавать статьи про игры, и оставлять особые рецензии на игры
		   Модератор добавляется администратором, и имеет связь на администратора (в таблице юзер на самого себя). 
		   1. Модератор может управлять своим администратором, видеть статистику (кол-во стетей, отзывов, процент негативных и положительных)
		   2. Может редакторировать и видеть список статей, и рецензий. 
		   3. Модератор же может создавать свои статьи, и работать только со своими статьями. А его администратор управлять только своими модераторами 
		   4. Статьи можно мягко удалять 
		   5. функция isAythor которая проверяет автора статьи
		 
		5. реализовать логику избранного для игр. Игры добавленные в избранное можно будет видеть в общем списке и получить специальным методом
		
		   
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
